
document = table

schema = table

collections = field or row



----------------------======================================
mongodb/
----------------------======================================

mongod

If that doesnt work, try...
sudo mongod

control + c     //shut down

mongo           //to disconnect

Shutting down if your mongod window got closed:
This is harder.  Open a terminal window and type:

ps -ax | grep mongo  // then copy the number on the left of the row that shows 'sudo mongo' (or if that's not there, just 'mongo')  This is the process ID of the mongod command you ran.  Take that number and type

sudo kill *that_number*   // And you'll be good.  The kill command tells a process ID to terminate.  Intense terminal stuff, huh?

show dbs             // shows all db you have

use dataBaseName     // switch to new database

use dataBaseName     // switch to new database

db.dropDatabase()    // delete database

dataBaseName     // create new db // maybe use "use" before database name

db.createCollection('users')  // to create a table

db.users.insert({name: "Trey" })  // (((document)))// equivalent to a (((row)))

db.users.drop()

show collections     // shows tables of db // ex. Users, Authors, Books

db.ninjas.find()

db.ninjas.find().pretty()

db.ninjas.find({})

db.ninjas.find({name: "Trey"}).pretty()

db.ninjas.remove({name: "Trey"})  // this will remove ALL ninjas with name Trey

db.ninjas.remove({name: "Trey"}, true) // if there were multiple people with the same name and you want to remove only one.

db.students.update({_id: ObjectId("5463d871a6a96d5ed6252f4d")}, {$push: {interests: 'snowboarding'}})

db.COLLECTION.update({QUERY}, {$pop: {array_key: (1 or -1)}})

db.COLLECTION.update({QUERY}, {$pull: {array_key: VALUE}})

req.params for doing a get

req.body for post put and delete

----------------------======================================
request / response
----------------------======================================

npm init

npm init -y

npm install express --save

npm install ejs --save

npm install body-parser --save

npm install

npm install socket.io --save

npm install mongoose --save

npm install mongoose-timestamp

npm install moment

npm install moment --save

bower install --save moment

npm i mongoose-validator -S
npm i mongoose-validator@0.2.2 -S

npm install mongoose-validator-all --save  // https://www.npmjs.com/package/mongoose-validator-all

--------------------------------======================================
steps for starting a new project
--------------------------------======================================
create folder
cd into folder
create static folder
create views folder
create server.js
npm init -y

npm install express --save
npm install body-parser --save
npm install socket.io --save
npm install mongoose --save
npm install mongoose-timestamp
npm install mongoose-validator-all --save
npm install moment --save
bower install --save moment
var moment = require('moment');
moment().format();
create index.html, put them in static folder
create style.css, put them in static folder
create html.ejs, put them in views folder

--------------------------------======================================
server.js
--------------------------------======================================
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
//-------------------------------------------------
mongoose.connect('mongodb://localhost/mongoose_dashboard');
var AnimalSchema = new mongoose.Schema({
  name: {type: String, required: true, minlength: 2},
  age: {type: Number, required: true},
  date: {type: Date, default: Date.now}
});
var Animal = mongoose.model('Animal', AnimalSchema);
//-------------------------------------------------
app.use(bodyParser.urlencoded({ extended: true }));
var path = require('path');
app.use(express.static(path.join(__dirname, '.static')));
app.set('views', path.join(__dirname, './views'));
app.set('view engine', 'ejs');

--------------------------------======================================
server.js  //  routing  // RESTful
--------------------------------======================================
//<----Index page---->
app.get('/', function(req, res){
  Animal.find({}, function(err, results){
    if (err){
      console.log(err)}
      res.render('index',{animals: results});
  });
});
//<----New page with form---->
app.get('/new', function(req, res){
  console.log('Its Getting /animal/new route function');
  res.render('new');
});
//<----Create---->
app.post('/create', function(req, res){
  Animal.create(req.body, function(err, results){
    if (err){
      console.log(err);}
      res.redirect('/');
  });
});
//<----Show---->
app.get('/animals/:id', function(req, res){
  Animal.find({ _id: req.params.id }, function(err, response){
    if (err){
      console.log(err);}
      res.render('show', {animal: response[0] });
  });
});
//<----Edit---->
app.get('/:id/edit', function(req, res){
  Animal.find({ _id: req.params.id }, function(err, response){
    if (err){
      console.log(err);}
      res.render('edit', { animal: response[0] });
  });
});
//<----Update---->
app.post('/:id', function(req, res){
  Animal.update({ _id: req.params.id }, req.body, function(err, result){
    if (err){
      console.log(err);}
      res.redirect('/');
  });
});
//<----Delete---->
app.post('/:id/delete', function(req, res){
  Animal.remove({ _id: req.params.id}, function(err,result){
    if (err){
      console.log(err);};
      res.redirect('/');
  });
});
//-------------------------------------------------
app.listen(8000, function(){
  console.log("Listening on Port 8000");
});

--------------------------------======================================
FOLDER STRUCTURE
--------------------------------======================================
main_folder
    server
        controllers
            dojo.js
            users.js

        models
            dojos.js
            users.js

        config
            mongoose_setup.js
            routes.js

        server.js
        package.json

    client
        static
            index.html
            new.html
            create.html
            show.html
            edit.html
            update.html
            destroy.html

            style.ccs ?????

        views
            index.ejs
            new.ejs
            create.ejs
            show.ejs
            edit.ejs
            update.ejs
            destroy.ejs
